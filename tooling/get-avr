#!/usr/bin/env bash

# Developer: Mohamed Ahmed
# Date: 18 February 2018
# Purpose: This is a script that delivers modules
# on demand to the working directory


displayHelp() 
{
	echo "get-avr tool is used to bring module files to the current working directory."
	echo "Usage: get-avr <Name_of_Module>"
	echo "Example: get-avr spi"
}

displayDrivers()
{
	echo "Available drivers: "
	echo "	dio, uart, spi, twi"
	echo "	uart, interrupts, makef, makefile-layered"
	echo "	adc, timer0, timer1, timer2"
	echo "	internal-eeprom"
	echo "	lcd, lcd-i2c, rtc, keypad, s7, eeprom"
	echo "	scheduler"
	echo "	syscntrl"
}


AVR_LIB_PATH=$HOME/programming/AVR-ATMega32-drivers-and-tools/lib



while getopts 'hv' OPTIONS; do
	case $OPTIONS in
		h)
			displayHelp
			exit;;
		v)
			displayDrivers
			exit;;

	esac
done

if [[ $# -eq 0 ]]
then
	cp $AVR_LIB_PATH/* ./
	echo "Copied all files"
else
	for i in $@
	do
		if [[ $i = "makef" || $i = "makefile" || $i = "Makefile" ]]
		then
			cp $AVR_LIB_PATH/Makefile ./
		elif [[ $i = "std" || $i = "Std" ]]
		then
			cp $AVR_LIB_PATH/Std_Types.h ./
		elif [[ $i = "macros" || $i = "Macros" ]]
		then 
			cp $AVR_LIB_PATH/Macros.h ./
		elif [[ $i = "dio" || $i = "DIO " ]]
		then
 			cp $AVR_LIB_PATH/DIO_program.c ./
 			cp $AVR_LIB_PATH/DIO_interface.h ./
			cp $AVR_LIB_PATH/DIO_private.h ./
 			cp $AVR_LIB_PATH/Std_Types.h ./
 			cp $AVR_LIB_PATH/Macros.h ./
		elif [[ $i = "lcd" ||  $i = "LCD" ]]
		then
			cp $AVR_LIB_PATH/LCD_program.c ./
			cp $AVR_LIB_PATH/LCD_interface.h ./
			cp $AVR_LIB_PATH/LCD_config.h ./
		elif [[ $i = "key" || $i = "keypad" ]]
		then
			cp $AVR_LIB_PATH/KEYPAD_program.c ./
			cp $AVR_LIB_PATH/KEYPAD_interface.h ./
			cp $AVR_LIB_PATH/SERVICES_program.c  ./
			cp $AVR_LIB_PATH/SERVICES_interface.h ./
		elif [[ $i = "eeprom" || $i = "EEPROM" ]]
		then 
			cp $AVR_LIB_PATH/EEPROM_EXTERNAL_program.c ./
			cp $AVR_LIB_PATH/EEPROM_EXTERNAL_interface.h ./
		elif [[ $i = "internal-eeprom" || $i = "InternalEEPROM" ]]
		then
			cp $AVR_LIB_PATH/EEPROM_INTERNAL_program.c ./
			cp $AVR_LIB_PATH/EEPROM_INTERNAL_interface.h ./
			cp $AVR_LIB_PATH/EEPROM_INTERNAL_private.h ./
		elif [[ $i = "scheduler" || $i = "SCHEDULER" ]]
		then
			cp $AVR_LIB_PATH/SCHEDULER_program.c ./
			cp $AVR_LIB_PATH/SCHEDULER_interface.h ./
		elif [[ $i = "rto" ]]
		then
			cp $AVR_LIB_PATH/RTO_prog.c ./
			cp $AVR_LIB_PATH/RTO_interface.h ./
		elif [[ $i = "twi" || $i = "TWI" ]]
		then
			cp $AVR_LIB_PATH/TWI_program.c ./
			cp $AVR_LIB_PATH/TWI_interface.h ./
		elif [[ $i = "uart" || $i = "UART" ]]
		then
			cp $AVR_LIB_PATH/UART_program.c ./
			cp $AVR_LIB_PATH/UART_interface.h ./
			cp $AVR_LIB_PATH/UART_private.h ./
		elif [[ $i = "7s" ]]
		then
			cp $AVR_LIB_PATH/SevenSegment_prog.c ./
			cp $AVR_LIB_PATH/SevenSegment_interface.h ./
		elif [[ $i = "stepper" ]]
		then
			cp $AVR_LIB_PATH/StepperMotor_prog.c ./
			cp $AVR_LIB_PATH/StepperMotor_interface.h ./
		elif [[ $i = "timer0" || $i = "TIMER0" ]]
		then
			cp $AVR_LIB_PATH/TIMER0_program.c ./
			cp $AVR_LIB_PATH/TIMER0_interface.h ./
			cp $AVR_LIB_PATH/TIMER0_private.h ./
		elif [[ $i = "timer1" || $i = "TIMER1" ]] 
		then 
			cp $AVR_LIB_PATH/TIMER1_program.c ./
			cp $AVR_LIB_PATH/TIMER1_interface.h ./
			cp $AVR_LIB_PATH/TIMER1_private.h ./
		elif [[ $i = "timer2" || $i = "TIMER2" ]]
		then
			cp $AVR_LIB_PATH/TIMER2_program.c ./
			cp $AVR_LIB_PATH/TIMER2_interface.h ./
		elif [[ $i = "interrupts" || $i = "INTERRUPTS" || $i = "interrupt" ]]
		then
			cp $AVR_LIB_PATH/INTERRUPTS_program.c ./
			cp $AVR_LIB_PATH/INTERRUPTS_interface.h ./
		elif [[ $i = "adc" || $i = "ADC" ]]
		then
			cp $AVR_LIB_PATH/ADC_program.c ./
			cp $AVR_LIB_PATH/ADC_interface.h ./
			cp $AVR_LIB_PATH/ADC_private.h ./
		elif [[ $i = "spi" || $i = "SPI" ]]
		then
			cp $AVR_LIB_PATH/SPI_program.c ./
			cp $AVR_LIB_PATH/SPI_interface.h ./
			cp $AVR_LIB_PATH/SPI_private.h ./
		elif [[ $i = "services" || $i = "SERVICES" ]]
		then
			cp $AVR_LIB_PATH/SERVICES_program.c ./
			cp $AVR_LIB_PATH/SERVICES_interface.h ./
		elif [[ $i = "settings" || $i = "SETTINGS" ]]
		then 
			cp $AVR_LIB_PATH/SETTINGS_interface.h ./
		elif [[ $i = "ic595" || $i = "IC595" ]]
		then
			cp $AVR_LIB_PATH/IC74595_interface.h ./
			cp $AVR_LIB_PATH/IC74595_program.c ./
		elif [[ $i = "ic165" || $i = "IC165" ]]
		then
			cp $AVR_LIB_PATH/IC74165_interface.h ./
			cp $AVR_LIB_PATH/IC74165_program.c ./
		elif [[ $i = "rtc" || $i = "RTC" ]]
		then
			cp $AVR_LIB_PATH/RTC_program.c ./
			cp $AVR_LIB_PATH/RTC_interface.h ./
		elif [[ $i = "dht22" || $i = "DHT22" ]]
		then
			cp $AVR_LIB_PATH/DHT22_program.c ./
			cp $AVR_LIB_PATH/DHT22_interface.h ./
		elif [[ $i = "SYSCNTRL" || $i = "syscntrl" ]]
		then
			cp $AVR_LIB_PATH/SYSCNTRL_program.c ./
			cp $AVR_LIB_PATH/SYSCNTRL_interface.h ./
			cp $AVR_LIB_PATH/SYSCNTRL_private.h ./
		elif [[ $i = "makef-layered" || $i = "Makefile-layered" || $i = "makefile-layered" ]]
		then
			cp $AVR_LIB_PATH/Makefile-layered ./
		elif [[ $i = "main" || $i = "main.c" ]]
		then
			cp $AVR_LIB_PATH/main.c ./
		elif [[ $i = "lcd-i2c" || $i = "LCD_I2C" ]]
		then 
			cp $AVR_LIB_PATH/LCD_I2C_program.c ./
			cp $AVR_LIB_PATH/LCD_I2C_interface.h ./
		else
			echo "Error: Could not process $i."
		fi

	done
fi

exit 0
